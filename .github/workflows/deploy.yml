name: deploy
on:
  push:
    branches: ["main"]
    tags: ["v*"]
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  rsync-and-restart:
    runs-on: ubuntu-latest
    env:
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_KEY:  ${{ secrets.SSH_KEY }}
    steps:
      - uses: actions/checkout@v4

      - name: Verify required secrets
        run: |
          [ -n "$SSH_HOST" ] && [ -n "$SSH_USER" ] && [ -n "$SSH_KEY" ] || { echo "Missing secrets SSH_HOST/SSH_USER/SSH_KEY"; exit 1; }

      - name: Ensure remote path exists
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_KEY }}
          script: |
            set -euo pipefail
            mkdir -p /opt/hardlock

      - name: Rsync repo (safe; keep server .env & configs)
        uses: burnett01/rsync-deployments@7.0.1
        with:
          switches: -az --exclude '.git/' --exclude '.github/' --exclude '.env' --exclude 'DEPLOY_TRIGGER'
          path: ./
          remote_path: /opt/hardlock/
          remote_host: ${{ env.SSH_HOST }}
          remote_user: ${{ env.SSH_USER }}
          remote_key: ${{ env.SSH_KEY }}

      - name: Restart + wait for health
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_KEY }}
          script: |
            set -euo pipefail
            cd /opt/hardlock
            if docker compose version >/dev/null 2>&1; then C="docker compose"; else C="docker-compose"; fi
            $C -f docker-compose.yml config >/dev/null
            $C build
            $C up -d --remove-orphans
            # wait up to 60s for both services
            for i in $(seq 1 12); do
              API=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:8080/health || true)
              KMS=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:8081/health || true)
              echo "try=$i api=$API kms=$KMS"
              if [ "$API" = "200" ] && [ "$KMS" = "200" ]; then break; fi
              sleep 5
            done
            [ "$API" = "200" ] && [ "$KMS" = "200" ] || { echo "ERROR: health check failed (api=$API kms=$KMS)"; $C ps; exit 16; }
            echo "OK: api/kms health 200"

  smoke-test:
    runs-on: ubuntu-latest
    needs: rsync-and-restart
    steps:
      - name: Check HTTPS health endpoints
        env:
          SMOKE_IP: 51.15.200.66
        run: |
          set -e
          IP=${SMOKE_IP:-51.15.200.66}
          for h in tufkey.com api.tufkey.com kms.tufkey.com; do
            url="https://$h/health"
            # force IPv4, bypass DNS with --resolve, retries
            code=$(curl -4 -sk --connect-timeout 5 --max-time 10 --retry 3 --retry-delay 2 --resolve $h:443:$IP -o /dev/null -w "%{http_code}" "$url" || true)
            echo "$h => $code"
            if [ "$code" != "200" ]; then
              echo "ERROR: $h returned $code"
              exit 1
            fi
          done
        run: |
          for u in https://tufkey.com/health https://api.tufkey.com/health https://kms.tufkey.com/health; do
            code=$(curl -sk -o /dev/null -w "%{http_code}" "$u")
            if [ "$code" != "200" ]; then
              echo "❌ $u returned $code"
              exit 1
            fi
            echo "✅ $u OK ($code)"
          done
