name: deploy
on:
  push:
    branches: ["main"]
    tags: ["v*"]
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  rsync-and-restart:
    runs-on: ubuntu-latest
    env:
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_KEY:  ${{ secrets.SSH_KEY }}
    steps:
      - uses: actions/checkout@v4

      - name: Verify required secrets
        run: |
          [ -n "$SSH_HOST" ] && [ -n "$SSH_USER" ] && [ -n "$SSH_KEY" ] || { echo "Missing secrets SSH_HOST/SSH_USER/SSH_KEY"; exit 1; }

      - name: Ensure remote path exists
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_KEY }}
          script: mkdir -p /opt/hardlock

      - name: Rsync repo (safe; keep server .env & configs)
        uses: burnett01/rsync-deployments@7.0.1
        with:
          switches: -az --exclude '.git/' --exclude '.github/' --exclude '.env' --exclude 'DEPLOY_TRIGGER'
          path: ./
          remote_path: /opt/hardlock/
          remote_host: ${{ env.SSH_HOST }}
          remote_user: ${{ env.SSH_USER }}
          remote_key: ${{ env.SSH_KEY }}

      - name: Restart + wait for local health
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_KEY }}
          script: |
            set -euo pipefail
            cd /opt/hardlock
            if docker compose version >/dev/null 2>&1; then C="docker compose"; else C="docker-compose"; fi
            # Caddy override si prÃ©sent
            FILES=(-f docker-compose.yml)
            [ -f docker-compose.caddy.yml ] && FILES+=(-f docker-compose.caddy.yml)
            $C "${FILES[@]}" up -d --remove-orphans
            # Attendre API/KMS up (local)
            for i in $(seq 1 18); do
              A=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:8080/health || true)
              K=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:8081/health || true)
              echo "try=$i api=$A kms=$K"
              [ "$A" = "200" ] && [ "$K" = "200" ] && break
              sleep 5
            done
            [ "$A" = "200" ] && [ "$K" = "200" ] || { echo "ERROR: local health failed (api=$A kms=$K)"; exit 16; }

  smoke-test:
    runs-on: ubuntu-latest
    needs: rsync-and-restart
    env:
      SMOKE_IP: 51.15.200.66
    steps:
      - name: Check HTTPS health endpoints (bypass DNS, IPv4, retries)
        run: |
          set -e
          IP="${SMOKE_IP:-51.15.200.66}"
          for h in tufkey.com api.tufkey.com kms.tufkey.com; do
            url="https://$h/health"
            code=$(curl -4 -sk --connect-timeout 5 --max-time 10 --retry 3 --retry-delay 2 --resolve "$h:443:$IP" -o /dev/null -w "%{http_code}" "$url" || true)
            echo "$h => $code"
            if [ "$code" != "200" ]; then
              echo "ERROR: $h returned $code"
              exit 17
            fi
          done

  smoke-test-ip:
    runs-on: ubuntu-latest
    needs: rsync-and-restart
    env:
      TARGET_IP: 51.15.200.66
      HOSTS: "tufkey.com api.tufkey.com kms.tufkey.com"
    steps:
      - name: HTTPS smoke with DNS bypass (IPv4 + retries)
        run: |
          set -e
          for h in $HOSTS; do
            code=$(curl -4 -sk --connect-timeout 5 --max-time 12 --retry 3 --retry-delay 2 \
                    --resolve $h:443:$TARGET_IP -o /dev/null -w "%{http_code}" https://$h/health || true)
            echo "$h => $code"
            [ "$code" = "200" ] || exit 1
          done
